
/*
  Higher Order Functions
  ---> is a function that accepts functions as parameters and/or returns a function.

  - Map
  --- method creates a new array
  --- populated with the results of calling a provided function on every element
  --- in the calling array.

  Syntax map(callBackFunction(Element, Index, Array) { }, thisArg)
  - Element => The current element being processed in the array.
  - Index => The index of the current element being processed in the array.
  - Array => The Current Array

  Notes
  - Map Return A New Array

  Examples
  - Anonymous Function
  - Named Function

*/













/First Examble

// let myNums=[1,2,3,4,5,6]
// let myNewNums=[];
// for (let i=0;i<myNums.length;i++){
//   myNewNums.push(myNums[i]+myNums[i]);
// }
// console.log(myNewNums)

// map method  pattern No 1 : with anumnous function
// let myNums=[1,2,3,4,5,6]
// let adself=myNums.map(function(element,index,arr){
//   // console.log(`${element}`)
//   // console.log(`${index}`)
//   // console.log(`${arr}`)
//   return element+element;

// },20);

//// map method  pattern No 2 :Arrow function  

// let adself=myNums.map((element)=>element+element);
  // console.log(`${element}`)
  // console.log(`${index}`)
  // console.log(`${arr}`)
   

// let adself=myNums.map((element,index,arr)=>  element+element);;
  // console.log(`${element}`)
  // console.log(`${index}`)
  
  
// console.log(`${arr}`)


//// map method  pattern No 3  with named function
// function add(ele){
//   return ele+ele

// }
// let addself=myNums.map(add)


// console.log(addself)